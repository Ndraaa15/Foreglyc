name: foreglyc
services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend
    expose:
      - ${BACKEND_PORT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - foreglyc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  postgres:
    image: postgres:17
    container_name: postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - foreglyc_prod_pg_data:/var/lib/postgresql/data
      - ./initdb/init-create-schemas.sh:/docker-entrypoint-initdb.d/init-create-schemas.sh
    networks:
      - foreglyc-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7
    container_name: redis
    restart: unless-stopped
    env_file:
      - .env
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - foreglyc_prod_redis_data:/data
    command:
      [
        "redis-server",
        "--requirepass",
        "${REDIS_PASSWORD}",
        "--appendonly",
        "yes",
      ]
    networks:
      - foreglyc-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  nginx:
    image: nginx:1.25.3
    container_name: nginx
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - foreglyc-network
    restart: unless-stopped
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 10s

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: always
    env_file:
      - .env
    ports:
      - "5678:5678"
    environment:
      - DB_TYPE=${N8N_DB_TYPE}
      - DB_POSTGRESDB_HOST=${N8N_POSTGRESDB_HOST}
      - DB_POSTGRESDB_PORT=${N8N_POSTGRESDB_PORT}
      - DB_POSTGRESDB_DATABASE=${N8N_POSTGRESDB_DATABASE}
      - DB_POSTGRESDB_USER=${N8N_POSTGRESDB_USER}
      - DB_POSTGRESDB_SCHEMA=${N8N_POSTGRESDB_SCHEMA}
      - DB_POSTGRESDB_PASSWORD=${N8N_POSTGRESDB_PASSWORD}
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - NODE_ENV=${N8N_NODE_ENV}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - foreglyc-network
    volumes:
      - foregylc_prod_n8n_data:/home/node/.n8n

volumes:
  foreglyc_prod_pg_data:
  foreglyc_prod_redis_data:
  foregylc_prod_n8n_data:

networks:
  foreglyc-network:
    driver: bridge
